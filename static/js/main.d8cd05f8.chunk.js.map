{"version":3,"sources":["APIs/blogApi.js","actions/index.js","components/InputForm.js","components/Home.js","components/Pages.js","components/UserPost.js","components/helper.js","components/Post.js","App.js","reducers/index.js","reducers/usersReducer.js","reducers/postsReducer.js","reducers/paginatedReducer.js","reducers/userDetailsReducer.js","reducers/postDetailsReducer.js","reducers/commentsReducer.js","index.js"],"names":["axios","create","baseURL","getPostsForAUser","id","isOnlyNumRequired","dispatch","a","blogApi","get","response","type","payload","num","data","length","console","log","fetchUserDetails","InputForm","className","this","props","updateSearchParams","style","maxWidth","onChange","e","target","value","placeholder","searchBy","filter","Component","Home","onFilterApply","setState","filterKeyword","updateFilterParams","params","filterParam","state","fetchUsersWithBlogCount","list","users","map","user","i","posts","find","key","name","includes","company","to","scope","Boolean","colSpan","connect","getState","_","uniq","forEach","Pages","getPages","total","totalPages","limit","lastPage","Math","ceil","Array","from","keys","pageClicked","page","updatePost","pagesBtn","currentPage","onClick","saria-label","numOfPosts","UserPost","updatePosts","pageNo","pageOffset","getPostsForAUserWithPagination","match","filterPosts","keyword","filterParams","userID","totalPostsByUser","paginatedPosts","post","history","push","title","aria-hidden","userDetail","email","marginLeft","padding","deletePostAPI","delete","Post","handleFilter","deletePost","then","catch","err","isShowingComment","getPostDetails","getPostComments","prevProps","prevState","postDetail","commentsBody","comments","comment","body","postTitle","replace","RegExp","split","item","postBody","margin","class","postDetails","App","textDecoration","exact","path","component","allreducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"8PAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAQ,yC,iBCUCC,EAAmB,SAACC,GAAD,IAAKC,EAAL,sGAAmC,WAAMC,GAAN,eAAAC,EAAA,+EAEpCC,EAAQC,IAAR,wBAA6BL,IAFO,OAErDM,EAFqD,OAGvCJ,EAApBD,EAA6B,CAAEM,KAAM,gCAAiCC,QAAS,CAAER,GAAIA,EAAIS,IAAKH,EAASI,KAAKC,SAAuB,CAAEJ,KAAM,qBAAsBC,QAASF,EAASI,OAHxH,gDAK3DE,QAAQC,IAAR,MAL2D,yDAAnC,uDAsBnBC,EAAmB,SAACd,GAAD,8CAAQ,WAAME,GAAN,eAAAC,EAAA,sEACbC,EAAQC,IAAR,iBAAsBL,IADT,OAC9BM,EAD8B,OAEpCJ,EAAS,CAAEK,KAAM,qBAAsBC,QAASF,EAASI,OAFrB,2CAAR,uD,eCjCXK,E,4JAEjB,WAAU,IAAD,OACL,OAEQ,sBAAKC,UAAU,uCAAf,UAEI,wBAAOA,UAAU,8BAAjB,cAAgD,mBAAGA,UAAU,wBAA7D,gBAGDC,KAAKC,MAAMC,oBAAuB,yBAAQH,UAAU,cAAeI,MAAO,CAAEC,SAAU,OAASC,SAAU,SAACC,GACpG,EAAKL,MAAMC,mBAAmBI,EAAEC,OAAOC,QADX,UAK7B,wBAAQA,MAAM,WAAd,uBACA,wBAAQA,MAAM,UAAd,wBAEJ,uBAAOlB,KAAK,OAAOS,UAAU,eAAeU,YAAW,eAAUT,KAAKC,MAAMS,UAAYL,SAAU,SAACC,GAC/F,EAAKL,MAAMU,OAAOL,EAAEC,OAAOC,iB,GAnBZI,aCOjCC,E,kDAEF,aAAe,IAAD,8BACV,gBAYJC,cAAgB,SAACrB,GACb,EAAKsB,SAAS,CACVC,cAAevB,KAfT,EAmBdwB,mBAAqB,SAACC,GAClB,EAAKH,SAAS,CACVI,YAAaD,KAnBjB,EAAKE,MAAQ,CACTD,YAAa,WACbH,cAAe,IAJT,E,qDAQd,WACIhB,KAAKC,MAAMoB,4B,oBAgBf,WAAU,IAAD,OAECC,EAAOtB,KAAKC,MAAMsB,MAAMC,KAAI,SAACC,EAAMC,GACrC,IAAMlC,EAAM,EAAKS,MAAM0B,MAAMC,MAAK,SAAAC,GAAG,OAAIA,EAAI9C,KAAO0C,EAAK1C,GAAK8C,EAAIrC,IAAM,KACxE,GAAiC,KAA7B,EAAK4B,MAAMJ,oBAGX,GAA+B,aAA3B,EAAKI,MAAMD,aACX,IAAKM,EAAKK,KAAKC,SAAS,EAAKX,MAAMJ,eAC/B,YAEJ,IAAKS,EAAKO,QAAQF,KAAKC,SAAS,EAAKX,MAAMJ,eACvC,OAGZ,OAAQ,+BAAkB,6BAAKS,EAAKK,OAAU,6BAAKL,EAAKO,QAAQF,OAAU,6BAAI,eAAC,IAAD,CAAM/B,UAAU,gBAAgBkC,GAAE,iBAAYR,EAAK1C,IAAnD,cAC1ES,EAAMA,EAAIA,IAAM,EAD0D,gBAA7DiC,EAAK1C,OAI1B,OACI,gCACI,cAAC,EAAD,CAAW4B,OAAQX,KAAKc,cAAeJ,SAAUV,KAAKoB,MAAMD,YAAajB,mBAAoBF,KAAKiB,qBAClG,wBAAOlB,UAAU,QAAjB,UACI,uBAAOA,UAAU,aAAjB,SACI,+BACI,oBAAImC,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,qBACA,oBAAIA,MAAM,MAAV,wBAGR,gCAEOZ,EAAKX,OAAOwB,SAASzC,OAAS,EAAI4B,EAAO,6BAAuB,oBAAIc,QAAQ,IAAZ,gCAAbd,EAAK5B,oB,GA3DhEkB,aAyEJyB,eAJS,SAACjB,GACrB,MAAO,CAAEG,MAAOH,EAAMG,MAAOI,MAAOP,EAAMO,SAGN,CAAEN,wBF3DH,yDAAM,WAAOpC,EAAUqD,GAAjB,SAAApD,EAAA,sEACnCD,EAnBgB,uCAAM,WAAMA,GAAN,eAAAC,EAAA,sEACLC,EAAQC,IAAI,UADP,OACtBC,EADsB,OAE5BJ,EAAS,CAAEK,KAAM,cAAeC,QAASF,EAASI,OAFtB,2CAAN,uDAkBmB,OAEzB8C,IAAEC,KAAKD,IAAEf,IAAIc,IAAWf,MAAO,OACvCkB,SAAQ,SAAA1D,GACZE,EAASH,EAAiBC,GAAI,OAJO,2CAAN,0DE2DxBsD,CAAsDxB,GCnDtD6B,E,4MA3BXC,SAAW,WACP,IAAMC,EAAQ,EAAK3C,MAAM4C,WACnBC,EAAQ,EAAK7C,MAAM6C,MACnBC,EAAWC,KAAKC,KAAKL,EAAQE,GAEnC,OADiBI,MAAMC,KAAKD,MAAMH,GAAUK,S,EAGhDC,YAAc,SAACC,GACX,EAAKrD,MAAMsD,WAAWD,I,4CAE1B,WAAU,IAAD,OACCE,EAAWxD,KAAK2C,WAAWnB,KAAI,SAAA8B,GACjC,OAAQ,oBAAIvD,UAAU,YAAd,SAAqC,qBAAKA,UAAW,uBAAyB,EAAKE,MAAMwD,cAAcH,EAAK,EAAI,cAAgB,IAAMI,QAAS,WAAQ,EAAKL,YAAYC,EAAO,IAA1I,SAAiJA,EAAO,KAA9JA,MAE3C,OACI,8BACI,sBAAKvD,UAAU,GAAG4D,cAAY,0BAA9B,UACI,8BAAM3D,KAAKC,MAAM2D,aACjB,oBAAI7D,UAAU,uBAAd,SACKyD,a,GArBL5C,aCKdiD,E,kDAEF,WAAY5D,GAAQ,IAAD,8BACf,cAAMA,IAiBV6D,YAAc,SAACC,GACX,EAAKhD,SAAS,CACViD,WAAYD,IAEhB,EAAK9D,MAAMgE,+BAA+B,EAAKhE,MAAMiE,MAAMhD,OAAOnC,GAAIgF,EAAQ,EAAK3C,MAAM0B,QAtB1E,EAyBnBqB,YAAc,SAACC,GAEX,EAAKrD,SAAS,CACVsD,aAAcD,IAElB,EAAKnE,MAAMnB,iBAAiB,EAAKsC,MAAMkD,SA5BvC,EAAKlD,MAAQ,CACTkD,OAAQ,KACRxB,MAAO,EACPkB,WAAY,EACZO,iBAAkB,GAClBF,aAAc,IAPH,E,qDAUnB,WACIrE,KAAKe,SAAS,CACVuD,OAAQtE,KAAKC,MAAMiE,MAAMhD,OAAOnC,KAEpCiB,KAAKC,MAAMJ,iBAAiBG,KAAKC,MAAMiE,MAAMhD,OAAOnC,IACpDiB,KAAKC,MAAMgE,+BAA+BjE,KAAKC,MAAMiE,MAAMhD,OAAOnC,GAAIiB,KAAKoB,MAAM4C,WAAYhE,KAAKoB,MAAM0B,S,oBAiB5G,WAAU,IAAD,OAECnB,EAAoC,KAA5B3B,KAAKoB,MAAMiD,aAAsBrE,KAAKC,MAAMuE,eAAehD,KAAI,SAAAiD,GACzE,OAAO,oBAAI1E,UAAU,aAAc2D,QAAS,WAAK,EAAKzD,MAAMyE,QAAQC,KAAnB,gBAAiC,EAAKvD,MAAMkD,OAA5C,YAAsDG,EAAK1F,MAArG,SAA+I,8BAAM,6BAAK0F,EAAKG,WAA5CH,EAAK1F,GAAK,IAAM0F,EAAKG,UAC9I5E,KAAKC,MAAM0B,MAAMH,KAAI,SAAAiD,GACtB,GAAIA,EAAKG,MACL,OAAOH,EAAKG,MAAM7C,SAAS,EAAKX,MAAMiD,cAAgB,oBAAItE,UAAU,aAAa2D,QAAS,WAAK,EAAKzD,MAAMyE,QAAQC,KAAnB,gBAAiC,EAAKvD,MAAMkD,OAA5C,YAAsDG,EAAK1F,MAApG,SAA8I,8BAAM,6BAAK0F,EAAKG,WAA5CH,EAAK1F,GAAK,IAAM0F,EAAKG,OAAgD,QAGrP,OAAQ,gCACJ,qBAAK7E,UAAU,0BAAf,SACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,wBAAf,SACI,8BAAK,mBAAGA,UAAU,uBAAuB8E,cAAY,aAEzD,sBAAK9E,UAAU,GAAf,UACI,gCAAK,6BAAMC,KAAKC,MAAM6E,WAAWhD,KAAO9B,KAAKC,MAAM6E,WAAWhD,KAAO,OAArE,QAEA,8BAAK,oBAAG/B,UAAU,MAAb,qBAA4BC,KAAKC,MAAM6E,WAAWC,MAAQ/E,KAAKC,MAAM6E,WAAWC,MAAQ,UAC7F,8BAAK,oBAAGhF,UAAU,MAAb,sBAA6BC,KAAKC,MAAM6E,WAAW9C,QAAUhC,KAAKC,MAAM6E,WAAW9C,QAAQF,KAAO,kBAInH,sBAAK/B,UAAU,iCAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,OAAf,SAAsB,qBAAII,MAAO,CAAE6E,WAAY,OAAzB,6BAAmDhF,KAAKC,MAAM6E,WAAWhD,KAAO9B,KAAKC,MAAM6E,WAAWhD,KAAO,UAE/H,cAAC,EAAD,CAAWpB,SAAS,aAAaC,OAAQX,KAAKmE,iBAEtD,8BACI,qBAAKpE,UAAU,QAAf,SACI,oBAAII,MAAO,CAAE8E,QAAS,OAAtB,SAAgCtD,EAAMjC,OAAS,EAAIiC,EAAMhB,OAAOwB,SAASzC,OAAS,EAAIiC,EAAQ,oDAA+B,qBAAK5B,UAAU,SAAf,SAAwB,+BAAI,sBAAMA,UAAU,uBAApB,wBAG7J,8BACiC,KAA5BC,KAAKoB,MAAMiD,cAAuB,cAAC,EAAD,CAC/BxB,WAAY7C,KAAKoB,MAAMmD,iBACvBd,YAAazD,KAAKoB,MAAM4C,WACxBlB,MAAO9C,KAAKoB,MAAM0B,MAClBS,WAAYvD,KAAK8D,0B,GAzElBlD,aAyFRyB,eARS,SAACjB,GAErB,OADAzB,QAAQC,IAAIwB,EAAMO,OACX,CACHmD,WAAY1D,EAAM0D,WAClBN,eAAgBpD,EAAMoD,eACtB7C,MAAOP,EAAMO,SAGmB,CACpC9B,mBACAoE,+BJ5C0C,SAAClF,EAAIiF,EAAYlB,GAAjB,8CAA2B,WAAM7D,GAAN,eAAAC,EAAA,+EAE1CC,EAAQC,IAAR,wBAA6BL,EAA7B,kBAAyCiF,EAAzC,mBAA8DlB,IAFpB,OAE3DzD,EAF2D,OAGjEJ,EAAS,CAAEK,KAAM,qCAAsCC,QAASF,EAASI,OAHR,gDAKjEE,QAAQC,IAAR,MALiE,yDAA3B,uDI6C1Cd,oBAHWuD,CAIZwB,GCjGUqB,EAAa,uCAAG,WAAOnG,GAAP,eAAAG,EAAA,sEACFC,EAAQgG,OAAR,iBAAyBpG,IADvB,cACnBM,EADmB,yBAElBA,GAFkB,2CAAH,sDCGpB+F,E,kDAOF,WAAYnF,GAAQ,IAAD,8BACf,cAAMA,IAgBVoF,aAAe,SAACjB,GACZ,EAAKrD,SAAS,CACVsD,aAAcD,KAnBH,EAuBnBkB,WAAa,WACT,IAAMvG,EAAK,EAAKqC,MAAM3B,KAAKV,GAC3BmG,EAAcnG,GAAIwG,MAAK,WACnB,EAAKtF,MAAMyE,QAAQC,KAAnB,iBAAkC,EAAK1E,MAAM6E,WAAW/F,QACzDyG,OAAM,SAAAC,GACL9F,QAAQC,IAAI6F,OA1BhB,EAAKrE,MAAQ,CACTiD,aAAc,GACd5E,KAAM,GACNiG,kBAAkB,GALP,E,qDANnB,WACI1F,KAAKC,MAAM0F,eAAe3F,KAAKC,MAAMiE,MAAMhD,OAAOnC,IAClDiB,KAAKC,MAAMJ,iBAAiBG,KAAKC,MAAMiE,MAAMhD,OAAOoD,QACpDtE,KAAKC,MAAM2F,gBAAgB5F,KAAKC,MAAMiE,MAAMhD,OAAOnC,M,gCAYvD,SAAmB8G,EAAWC,GACtBD,EAAUE,aAAe/F,KAAKC,MAAM8F,YACpC/F,KAAKe,SAAS,CACVtB,KAAMO,KAAKC,MAAM8F,e,oBAmB7B,WAAU,IAAD,OAECC,EAAehG,KAAKC,MAAMgG,SAASzE,KAAI,SAAA0E,GACzC,OAAO,oBAAInG,UAAU,UAAd,SAAwB,sBAAKA,UAAU,iBAAf,UAAgC,8BAAK,wBAAOA,UAAU,aAAjB,UAA8B,mBAAGA,UAAU,kBAAkB8E,cAAY,SAAzE,IAAsFqB,EAAQnB,WAAqBmB,EAAQC,aAG7LC,EAAwC,KAA5BpG,KAAKoB,MAAMiD,aAAsBrE,KAAKoB,MAAM3B,KAAKmF,MAAQ5E,KAAKoB,MAAM3B,KAAKmF,MAAMyB,QAAQ,IAAIC,OAAOtG,KAAKoB,MAAMiD,aAAc,KAAlE,WAA4ErE,KAAKoB,MAAMiD,aAAvF,MAAwGkC,MAAM,KAAK/E,KAAI,SAACgF,GAAiB,IAAX9E,EAAU,uDAAN,EACzM,OAAO8E,EAAKzE,SAAS,EAAKX,MAAMiD,cAAgB,sBAAMtE,UAAU,wBAAhB,SAAmDyG,GAAN9E,KAAqB8E,KAGhHC,EAAuC,KAA5BzG,KAAKoB,MAAMiD,aAAsBrE,KAAKoB,MAAM3B,KAAK0G,KAAOnG,KAAKoB,MAAM3B,KAAK0G,KAAKE,QAAQ,IAAIC,OAAOtG,KAAKoB,MAAMiD,aAAc,KAAjE,WAA2ErE,KAAKoB,MAAMiD,aAAtF,MAAuGkC,MAAM,KAAK/E,KAAI,SAACgF,GAAiB,IAAX9E,EAAU,uDAAN,EACtM,OAAO8E,EAAKzE,SAAS,EAAKX,MAAMiD,cAAgB,sBAAMtE,UAAU,wBAAhB,SAAmDyG,GAAN9E,KAAqB8E,KAEtH,OACI,gCACI,cAAC,EAAD,CAAW9F,SAAS,OAAOC,OAAQX,KAAKqF,eACxC,sBAAKtF,UAAU,iBAAf,UAEI,gCAEI,oBAAII,MAAO,CAAEuG,OAAQ,OAArB,SAAgCN,IAEhC,wBAAOrG,UAAU,kBAAjB,wBAA+CC,KAAKC,MAAM6E,WAAWhD,KAAO9B,KAAKC,MAAM6E,WAAWhD,KAAO,WAE7G,qBAAK/B,UAAU,OAAf,SACK0G,IAEL,sBAAK1G,UAAU,OAAf,UACI,sBAAKA,UAAU,SAAf,UACI,sBAAKA,UAAU,eAAehB,GAAG,gBAAgB2E,QAAS,YACtB,IAAhC,EAAKtC,MAAMsE,iBAA6B,EAAK3E,SAAS,CAAE2E,kBAAkB,IAAU,EAAK3E,SAAS,CAAE2E,kBAAkB,KAD1H,UAEI,mBAAG3F,UAAU,wBAA0B,kCAAuC,IAAhCC,KAAKoB,MAAMsE,iBAA4B,OAAS,OAAvD,kBAC3C,sBAAK3F,UAAU,eAAehB,GAAG,cAAc2E,QAAS1D,KAAKsF,WAA7D,UACI,mBAAGqB,MAAM,0BADb,qBAMJ,qBAAK5G,WAA2C,IAAhCC,KAAKoB,MAAMsE,iBAA4B,gBAAkB,WAAzE,SACI,8BACI,qBAAIvF,MAAO,CAAEuG,OAAQ,MAAOzB,QAAS,OAArC,cAAgDe,EAAhD,wB,GA9EbpF,aAgGJyB,eARS,SAACjB,GACrB,MAAO,CACH0D,WAAY1D,EAAM0D,WAClBiB,WAAY3E,EAAMwF,YAClBX,SAAU7E,EAAM6E,YAIgB,CACpCN,eN1D0B,SAAC5G,GAAD,8CAAQ,WAAME,GAAN,eAAAC,EAAA,sEACXC,EAAQC,IAAR,iBAAsBL,IADX,OAC5BM,EAD4B,OAElCJ,EAAS,CAAEK,KAAM,qBAAsBC,QAASF,EAASI,OAFvB,2CAAR,uDM2D1BI,mBACA+F,gBNtC2B,SAAC7G,GAAD,8CAAQ,WAAME,GAAN,eAAAC,EAAA,sEACZC,EAAQC,IAAR,2BAAgCL,IADpB,OAC7BM,EAD6B,OAEnCJ,EAAS,CAAEK,KAAM,2BAA4BC,QAASF,EAASI,OAF5B,2CAAR,wDMmChB4C,CAIZ+C,G,MChGY,SAASyB,IACpB,OACI,qBAAK9G,UAAU,iBAAf,SACI,sBAAKA,UAAU,iBAAf,UACI,eAAC,IAAD,CAAMkC,GAAG,QAAQ9B,MAAO,CAAE2G,eAAgB,QAA1C,cAAqD,mCAAK,mBAAG/G,UAAU,wBAAlB,mBACrD,eAAC,IAAD,WACI,cAAC,IAAD,CAAOgH,OAAK,EAACC,KAAK,IAAlB,SACI,cAAC,IAAD,CAAU/E,GAAG,YAEjB,cAAC,IAAD,CAAO+E,KAAK,QAAQC,UAAWpG,EAAMkG,OAAK,IAC1C,cAAC,IAAD,CAAOC,KAAK,aAAaC,UAAWpD,EAAUkD,OAAK,IACnD,cAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAW7B,EAAM2B,OAAK,Y,oBCL3DG,EATKC,YAAgB,CAChC5F,MCLW,WAAoB,IAAnBH,EAAkB,uDAAZ,GAAGgG,EAAS,uCAC9B,OAAOA,EAAO9H,MACV,IAAK,cACD,OAAO8H,EAAO7H,QACjB,QACG,OAAO6B,IDCfO,MENW,WAAyB,IAAxBP,EAAuB,uDAAf,GAAIgG,EAAW,uCACnC,OAAQA,EAAO9H,MACX,IAAK,gCACD,MAAM,GAAN,mBAAW8B,GAAX,CAAkBgG,EAAO7H,UAC7B,IAAK,qBACD,OAAO6H,EAAO7H,QAClB,QACI,OAAO6B,IFAfoD,eGPW,WAAoB,IAAnBpD,EAAkB,uDAAZ,GAAGgG,EAAS,uCAC9B,OAAOA,EAAO9H,MACb,IAAK,qCACE,OAAO8H,EAAO7H,QAClB,QACI,OAAO6B,IHGf0D,WIRW,WAAoB,IAAnB1D,EAAkB,uDAAZ,GAAGgG,EAAS,uCAC9B,OAAOA,EAAO9H,MACV,IAAK,qBACD,OAAO8H,EAAO7H,QACjB,QACG,OAAO6B,IJIfwF,YKTW,WAAyB,IAAxBxF,EAAuB,uDAAf,GAAIgG,EAAW,uCACnC,OAAQA,EAAO9H,MACX,IAAK,qBACD,OAAO8H,EAAO7H,QAClB,QACI,OAAO6B,ILKf6E,SMVW,WAAyB,IAAxB7E,EAAuB,uDAAf,GAAIgG,EAAW,uCACnC,OAAQA,EAAO9H,MACX,IAAK,2BACD,OAAO8H,EAAO7H,QAClB,QACI,OAAO6B,M,QCIbiG,EAAQC,YAAYJ,EAAYK,YAAgBC,MAEtDC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,IAAD,UAEI,cAAC,EAAD,QAGRM,SAASC,eAAe,W","file":"static/js/main.d8cd05f8.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n    baseURL:'https://jsonplaceholder.typicode.com'\n});","\nimport blogApi from '../APIs/blogApi';\nimport _ from 'lodash';\n\n//Fetching all users from API\nexport const fetchUsers = () => async dispatch => {\n    const response = await blogApi.get('/users');\n    dispatch({ type: 'FETCH_USERS', payload: response.data });\n}\n//Fetching all posts of a particular user  from API\n/*\nArgument(s) to the function : userID\n */\nexport const getPostsForAUser = (id, isOnlyNumRequired = false) => async dispatch => {\n    try {\n        const response = await blogApi.get(`/posts?userId=${id}`);\n        isOnlyNumRequired ? dispatch({ type: 'FETCH_NUMBER_OF_POST_OF_USERS', payload: { id: id, num: response.data.length } }) : dispatch({ type: 'FETCH_POST_OF_USER', payload: response.data });\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n//Fetching all the users and for each user id (unique), fetching the number of posts made. \nexport const fetchUsersWithBlogCount = () => async (dispatch, getState) => {\n    await dispatch(fetchUsers());\n    const userIDs = _.uniq(_.map(getState().users, 'id'));\n    userIDs.forEach(id => {\n        dispatch(getPostsForAUser(id, true))\n    });\n}\n\n//Fetching all the users deatils for an ID.\n/*\nArgument(s) to the function : userID\n */\nexport const fetchUserDetails = (id) => async dispatch => {\n    const response = await blogApi.get(`/users/${id}`);\n    dispatch({ type: 'FETCH_USER_DETAILS', payload: response.data });\n}\n\n\n//Fetching Details of user by taking PostID as arg.\n/*\nArgument(s) to the function : Post ID\n */\nexport const getPostDetails = (id) => async dispatch =>{\n    const response = await blogApi.get(`/posts/${id}`);\n    dispatch({ type: 'FETCH_POST_DETAILS', payload: response.data });\n}\n\n//Fetching all the users deatils for an user ID with Pagination. \n/*\nArgument(s) to the function : userID , Page Number or offset and Maximum number of pages(limit)\n */\nexport const getPostsForAUserWithPagination = (id, pageOffset, limit) => async dispatch => {\n    try {\n        const response = await blogApi.get(`/posts?userId=${id}&_page=${pageOffset}&_limit=${limit}`);\n        dispatch({ type: 'FETCH_POST_OF_USER_WITH_PAGINATION', payload: response.data });\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n//Fetching all the components in a post\n/*\nArgument(s) to the function : Post ID\n */\nexport const getPostComments = (id) => async dispatch =>{\n    const response = await blogApi.get(`/comments?postId=${id}`);\n    dispatch({ type: 'FETCH_COMMENTS_FOR_POSTS', payload: response.data });\n}\n","import React, { Component } from 'react'\n\nexport default class InputForm extends Component {\n    //Input form for filtering \n    render() {\n        return (\n          \n                <div className=\"input-group mb-2 ms-auto filter-form\" >\n                    \n                    <label className=\"input-group-text text-muted\"> <i className=\"fas fa-filter me-1 \"></i> Filter by</label>\n                   {\n                   //Select dropdown would only be rendered when updateSearchParams props would be provided. The prop defines wheather a user wants to filter by some a,b,c,d... where a,b,c,d.. is any attribute like username , company\n                   this.props.updateSearchParams &&  <select className=\"form-select\"  style={{ maxWidth: '30%' }} onChange={(e)=>{\n                         this.props.updateSearchParams(e.target.value)\n                   \n                   \n                   }}>\n                        <option value=\"Username\">User Name</option>\n                        <option value=\"Company\">Company</option>\n                    </select>}\n                    <input type=\"text\" className=\"form-control\" placeholder={`Type ${this.props.searchBy}`} onChange={(e)=>{\n                        this.props.filter(e.target.value)\n                        //On change property\n                    }} /> \n                </div>\n\n          \n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { fetchUsersWithBlogCount } from '../actions';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport InputForm from './InputForm';\nimport { Link } from 'react-router-dom';\n\n\nclass Home extends Component {\n      //Initializing component state\n    constructor() {\n        super();\n        this.state = {\n            filterParam: 'Username', // maintaining a state for filter type USERNAME OR COMPANY\n            filterKeyword: '', //Filtering parameter for filter box.\n        }\n    }\n    \n    componentDidMount() {\n        this.props.fetchUsersWithBlogCount();\n    }\n\n    //Filter by type is it USERNAME (OR) COMPANY \n    onFilterApply = (data) => {\n        this.setState({\n            filterKeyword: data\n        })\n    }\n//Updating filer parameters\n    updateFilterParams = (params) => {\n        this.setState({\n            filterParam: params\n        })\n    }\n\n    render() {\n        // if no filter parameter  directly render list else  do filteration and then  render.\n        const list = this.props.users.map((user, i) => {\n            const num = this.props.posts.find(key => key.id === user.id ? key.num : 0)\n            if (this.state.filterKeyword === '') {\n\n            } else {\n                if (this.state.filterParam === 'Username') {\n                    if (!user.name.includes(this.state.filterKeyword)) // if the userName doesnot includes the filter keyword\n                        return ;\n                } else {\n                    if (!user.company.name.includes(this.state.filterKeyword))// if the companyName doesnot includes the filter keyword\n                        return ;\n                }\n            }\n            return (<tr key={user.id}><td>{user.name}</td><td>{user.company.name}</td><td><Link className=\"link-parimary\" to={`/posts/${user.id}`}> {\n                num ? num.num : 0\n            } blogs</Link></td></tr>)\n        })\n        return (\n            <div>\n                <InputForm filter={this.onFilterApply} searchBy={this.state.filterParam} updateSearchParams={this.updateFilterParams} />\n                <table className=\"table\">\n                    <thead className=\"table-dark\">\n                        <tr >\n                            <th scope=\"col\">User Name</th>\n                            <th scope=\"col\">Company</th>\n                            <th scope=\"col\">Blogs</th>\n                        </tr>   \n                    </thead>\n                    <tbody>\n                        {\n                           list.filter(Boolean).length > 0 ? list : <tr  key={list.length}><td colSpan=\"3\">No records found.</td></tr>\n                        }\n                    </tbody>\n                </table>\n            </div>\n\n        )\n    }\n}\n// Mapping state to props\nconst mapStateToProps = (state) => {\n    return { users: state.users, posts: state.posts }\n}\n\nexport default connect(mapStateToProps, { fetchUsersWithBlogCount })(Home);\n","import React, { Component } from 'react'\n\nclass Pages extends Component {\n    //Pages component\n    getPages = () => {\n        const total = this.props.totalPages; // total number of pages \n        const limit = this.props.limit; // maximum number of posts in a page\n        const lastPage = Math.ceil(total / limit)\n        const pagesArr = Array.from(Array(lastPage).keys())\n        return pagesArr;\n    }\n    pageClicked = (page) => {\n        this.props.updatePost(page); // On page Click\n    }\n    render() {\n        const pagesBtn = this.getPages().map(page => {\n            return (<li className=\"page-item\" key={page}><div className={\"page-link page-nos \" + (this.props.currentPage===page+1 ? 'active-page' : '')}  onClick={() => { this.pageClicked(page + 1) }}>{page + 1}</div></li>)\n        })\n        return (\n            <div >\n                <nav className=\"\" saria-label=\"Page navigation example\">\n                    <div>{this.props.numOfPosts}</div>\n                    <ul className=\"pagination pagesDiv \">\n                        {pagesBtn}\n                    </ul>\n                </nav>\n            </div>\n        )\n    }\n}\n\nexport default Pages;","import React, { Component } from 'react'\nimport { fetchUserDetails, getPostsForAUserWithPagination, getPostsForAUser } from '../actions';\nimport { connect } from 'react-redux';\nimport Pages from './Pages';\nimport InputForm from './InputForm';\n\n\nclass UserPost extends Component {\n      //Initializing component state\n    constructor(props) {\n        super(props);\n        this.state = {\n            userID: null, \n            limit: 3,// maximum number of posts in a page\n            pageOffset: 1, //currentPageNumber\n            totalPostsByUser: 10,  //could be directly acheived from a API req and count length\n            filterParams: '',//Filtering parameter for search box.\n        }\n    }\n    componentDidMount() {\n        this.setState({\n            userID: this.props.match.params.id\n        }) //setting userID state from url params\n        this.props.fetchUserDetails(this.props.match.params.id) //action to fetch user details\n        this.props.getPostsForAUserWithPagination(this.props.match.params.id, this.state.pageOffset, this.state.limit); //action to fetch posts of the user WITH pagination.\n    }\n   //Method upon clicking on any page number.\n    updatePosts = (pageNo) => {\n        this.setState({\n            pageOffset: pageNo\n        });\n        this.props.getPostsForAUserWithPagination(this.props.match.params.id, pageNo, this.state.limit); \n    }\n    //Method to filter post\n    filterPosts = (keyword) => {\n        //when filtering entire posts needs to be fetched and to be computed upon\n        this.setState({\n            filterParams: keyword\n        });\n        this.props.getPostsForAUser(this.state.userID); // fetching posts of that user\n    }\n    render() {\n        //If any filter parameters provided then filter else directly render the paginaated posts.\n        const posts = this.state.filterParams === '' ? this.props.paginatedPosts.map(post => {\n            return <li className=\"posts-card\"  onClick={()=>{this.props.history.push(`/post/${this.state.userID}/${post.id}`)}}  key={post.id + '-' + post.title}><div ><h4>{post.title}</h4></div></li>\n        }) : this.props.posts.map(post => {\n            if (post.title) {\n                return post.title.includes(this.state.filterParams) ? <li className=\"posts-card\" onClick={()=>{this.props.history.push(`/post/${this.state.userID}/${post.id}`)}}  key={post.id + '-' + post.title}><div ><h4>{post.title}</h4></div></li> : null\n            }\n        })\n        return (<div>\n            <div className=\"card card-body userCard\">\n                <div className=\"d-flex\">\n                    <div className=\"me-3 text-center pt-3\">\n                        <div><i className=\"fa fa-user userPhoto\" aria-hidden=\"true\"></i></div>\n                    </div>\n                    <div className=\"\">\n                        <div><h4 >{this.props.userDetail.name ? this.props.userDetail.name : null}</h4>  </div>\n\n                        <div><p className=\"m-0\">E-mail: {this.props.userDetail.email ? this.props.userDetail.email : null}</p></div>\n                        <div><p className=\"m-0\">Company: {this.props.userDetail.company ? this.props.userDetail.company.name : null}</p></div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card card-body postsOfuserCard\">\n                <div className=\"user-post-nav\">\n                    <div className=\"pt-2\"><h6 style={{ marginLeft: '6px' }}>Blogs posted by {this.props.userDetail.name ? this.props.userDetail.name : null}</h6></div>\n                  \n                        <InputForm searchBy=\"Blog title\" filter={this.filterPosts} />\n                </div>\n                <div>\n                    <div className=\"posts\">\n                        <ul style={{ padding: '0px' }}>{posts.length > 0 ? posts.filter(Boolean).length > 0 ? posts : <div>No records found.</div> : <div className=\"loader\"><h4><span className=\"donutSpinner me-2 \"></span>Loading...</h4></div>}</ul>\n                    </div>\n                </div>\n                <div>\n                    {this.state.filterParams === '' && <Pages\n                        totalPages={this.state.totalPostsByUser}\n                        currentPage={this.state.pageOffset}\n                        limit={this.state.limit}\n                        updatePost={this.updatePosts} />}\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n//Mapping state to props.\nconst mapStateToProps = (state) => {\n    console.log(state.posts);\n    return {\n        userDetail: state.userDetail,\n        paginatedPosts: state.paginatedPosts,\n        posts: state.posts\n    }\n}\nexport default connect(mapStateToProps, {\n    fetchUserDetails,\n    getPostsForAUserWithPagination,\n    getPostsForAUser\n})(UserPost);\n","import blogApi from \"../APIs/blogApi\"; //Axios Api\n\n//Delete route; NOT Maintaining any global store for it.\nexport const deletePostAPI = async (id) => {\n    const response = await blogApi.delete(`/posts/${id}`); //Delete route for jsonPlaceholder API\n    return response;\n}","import React, { Component } from 'react'\nimport { getPostDetails, fetchUserDetails, getPostComments } from '../actions';\nimport { connect } from 'react-redux';\nimport InputForm from './InputForm';\nimport { deletePostAPI } from './helper';\n\nclass Post extends Component { \n    componentDidMount() {\n        this.props.getPostDetails(this.props.match.params.id); //Action for fetching the post details from API \n        this.props.fetchUserDetails(this.props.match.params.userID); //Action for fetching the user details from API \n        this.props.getPostComments(this.props.match.params.id) //Action for fetching the comments for a post \n    }\n    //Initializing component state\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterParams: '',  //Filtering parameter for filter box.\n            data: [],//Component storee for post data ( body , title )\n            isShowingComment: false // manintaining a flag for show and hide comments\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.postDetail !== this.props.postDetail) {\n            this.setState({\n                data: this.props.postDetail //Handling async behaviour of redux dispatch and update the data state to hole posts title and body\n            })\n        }\n    }\n    //Function to update state on type on filter box\n    handleFilter = (keyword) => {\n        this.setState({\n            filterParams: keyword\n        })\n    }\n    //Function to delete a post ; if successfull , it will redirect to user post page.\n    deletePost = () => {\n        const id = this.state.data.id;\n        deletePostAPI(id).then(() => {\n            this.props.history.push(`/posts/${this.props.userDetail.id}`);\n        }).catch(err => {\n            console.log(err);\n        })\n    }\n    render() {\n        //populating the comments \n        const commentsBody = this.props.comments.map(comment => {\n            return <li className=\"comment\"><div className=\"card card-body\"><div><small className=\"text-muted\"><i className=\"fa fa-user me-1\" aria-hidden=\"true\"></i> {comment.email}</small></div>{comment.body}</div></li>\n        })\n        //Logic to filter  the title (The logic is case-sensitive here.) \n        const postTitle = this.state.filterParams === '' ? this.state.data.title : this.state.data.title.replace(new RegExp(this.state.filterParams, 'g'), `~${this.state.filterParams}~`).split(\"~\").map((item, i = 0) => {\n            return item.includes(this.state.filterParams) ? <span className=\"bg-primary text-white\" key={i++}>{item}</span> : item\n        });\n        //Logic to filter  the post body (The logic is case-sensitive here.) \n        const postBody = this.state.filterParams === '' ? this.state.data.body : this.state.data.body.replace(new RegExp(this.state.filterParams, 'g'), `~${this.state.filterParams}~`).split(\"~\").map((item, i = 0) => {\n            return item.includes(this.state.filterParams) ? <span className=\"bg-primary text-white\" key={i++}>{item}</span> : item\n        });\n        return (\n            <div>\n                <InputForm searchBy=\"Text\" filter={this.handleFilter} />\n                <div className=\"card card-body\">\n\n                    <div>\n\n                        <h3 style={{ margin: '0px' }} >{postTitle}</h3>\n                        \n                        <small className=\"text-muted mt-2\">Posted by: {this.props.userDetail.name ? this.props.userDetail.name : null}</small>\n                    </div>\n                    <div className=\"mt-3\">\n                        {postBody}\n                    </div>\n                    <div className=\"mt-3\" >\n                        <div className=\"d-flex\">\n                            <div className=\"text-primary\" id=\"show-comments\" onClick={() => {\n                                this.state.isShowingComment === false ? this.setState({ isShowingComment: true }) : this.setState({ isShowingComment: false })\n                            }} ><i className=\"fas fa-comment me-1\"></i><span>{this.state.isShowingComment === true ? 'Hide' : 'Show'} comments</span></div>\n                            <div className=\"text-danger \" id=\"delete-post\" onClick={this.deletePost}>\n                                <i class=\"fas fa-trash-alt me-1\"></i> Delete post\n                        </div>\n\n                        </div>\n\n                        <div className={this.state.isShowingComment === true ? 'collapse show' : 'collapse'} >\n                            <div >\n                                <ul style={{ margin: '0px', padding: '0px' }}> {commentsBody} </ul>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n//Mapping redux state to props \nconst mapStateToProps = (state) => {\n    return {\n        userDetail: state.userDetail,\n        postDetail: state.postDetails,\n        comments: state.comments\n    }\n}\n\nexport default connect(mapStateToProps, {\n    getPostDetails,\n    fetchUserDetails,\n    getPostComments\n})(Post);","import React from 'react'\nimport { Route, Switch, Redirect, Link } from 'react-router-dom';\n\nimport Home from './components/Home';\nimport UserPost from './components/UserPost';\nimport Post from './components/Post';\n\nimport './App.css';\n\n\nexport default function App() {\n    return (\n        <div className=\"container main\">\n            <div className=\"card card-body\">\n                <Link to=\"/home\" style={{ textDecoration: 'none' }}> <h4> <i className=\"fab fa-blogger me-1\"></i>BloggoMojo</h4></Link>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Redirect to=\"/home\" />\n                    </Route>\n                    <Route path=\"/home\" component={Home} exact />\n                    <Route path=\"/posts/:id\" component={UserPost} exact />\n                    <Route path=\"/post/:userID/:id\" component={Post} exact />\n                </Switch>\n            </div>\n        </div>\n    )\n}\n","import { combineReducers } from 'redux';\nimport postsReducer from './postsReducer';\nimport usersReducer from './usersReducer';\nimport userDetailsReducer from './userDetailsReducer';\nimport paginatedPosts from './paginatedReducer';\nimport postDetailsReducer from './postDetailsReducer';\nimport commentsReducer from './commentsReducer';\nconst allreducers = combineReducers({\n    users: usersReducer,\n    posts:postsReducer,\n    paginatedPosts : paginatedPosts,\n    userDetail : userDetailsReducer,\n    postDetails : postDetailsReducer,\n    comments:commentsReducer\n})\n\nexport default allreducers;","/*\nReducer created to fetch the users to global store.\n*/\nexport default (state=[],action)=>{\n    switch(action.type){\n        case 'FETCH_USERS':\n            return action.payload;\n         default:\n            return state;\n    }\n}","/*\nReducer created to posts(COUNT (OR ) METADATA ) of a user to global store\n*/\nexport default (state = [], action) => {\n    switch (action.type) {\n        case 'FETCH_NUMBER_OF_POST_OF_USERS':\n            return [...state, action.payload];\n        case 'FETCH_POST_OF_USER':\n            return action.payload;\n        default:\n            return state;\n    }\n}","/*\nReducer created to  fetch the posts (PAGINATED)  to the global store\n*/\nexport default (state=[],action)=>{\n    switch(action.type){\n     case 'FETCH_POST_OF_USER_WITH_PAGINATION':\n            return action.payload\n        default:\n            return state;\n    }\n}","/*\nReducer created to fetch user details for a particular userID  to global store.\n*/\nexport default (state=[],action)=>{\n    switch(action.type){\n        case 'FETCH_USER_DETAILS':\n            return action.payload;\n         default:\n            return state;\n    }\n}","/*\nReducer created to fetch posts Details  for  a particular post ID  to the global store\n*/\nexport default (state = [], action) => {\n    switch (action.type) {\n        case 'FETCH_POST_DETAILS':\n            return action.payload\n        default:\n            return state;\n    }\n}","/*\nReducer created to fetch the comments to the global store\n*/\nexport default (state = [], action) => {\n    switch (action.type) {\n        case 'FETCH_COMMENTS_FOR_POSTS':\n            return action.payload\n        default:\n            return state;\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nimport { Provider } from 'react-redux';\nimport { createStore , applyMiddleware } from 'redux';\nimport allreducers from './reducers';\nimport thunk from 'redux-thunk';\n// index.js\n\nconst store = createStore(allreducers,applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n        \n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}